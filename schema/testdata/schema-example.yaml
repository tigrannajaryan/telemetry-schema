file_format: 1.0.0

versions:
  1.1.0:
    # Section "all" applies to attributes names for all data types: resources, spans, logs,
    # span events, metric labels.
    #
    # The translations in "all" section are performed first (for each particular version).
    # Only after that the translations in the specific section ("resources", "traces",
    # "metrics" or "logs") that corresponds to the data type are applied.
    #
    # The only translation possible in section "all" is renaming of attributes in
    # versions. For human readability versions are listed in reverse chronological
    # order, however note that the translations are applied in the order defined by
    # semver ordering.
    all:
      changes:
        - rename_attributes:
            # Mapping of attribute names (label names for metrics). The key is the old name
            # used prior to this version, the value is the new name starting from this version.

            # Rename k8s.* to kubernetes.*
            k8s.cluster.name: kubernetes.cluster.name
            k8s.namespace.name: kubernetes.namespace.name
            k8s.node.name: kubernetes.node.name
            k8s.node.uid: kubernetes.node.uid
            k8s.pod.name: kubernetes.pod.name
            k8s.pod.uid: kubernetes.pod.uid
            k8s.container.name: kubernetes.container.name
            k8s.replicaset.name: kubernetes.replicaset.name
            k8s.replicaset.uid: kubernetes.replicaset.uid
            k8s.cronjob.name: kubernetes.cronjob.name
            k8s.cronjob.uid: kubernetes.cronjob.uid
            k8s.job.name: kubernetes.job.name
            k8s.job.uid: kubernetes.job.uid
            k8s.statefulset.name: kubernetes.statefulset.name
            k8s.statefulset.uid: kubernetes.statefulset.uid
            k8s.daemonset.name: kubernetes.daemonset.name
            k8s.daemonset.uid: kubernetes.daemonset.uid
            k8s.deployment.name: kubernetes.deployment.name
            k8s.deployment.uid: kubernetes.deployment.uid

            service.namespace: service.namespace.name

    # Like "all" the "resources" section may contain only attribute renaming translations.
    # The only translation possible in this section is renaming of attributes in
    # versions.
    resources:
      changes:
        - rename_attributes:
            # Mapping of attribute names. The key is the old name
            # used prior to this version, the value is the new name starting from this version.
            telemetry.auto.version: telemetry.auto_instr.version

    spans:
      changes:
        # Sequence of translations to apply to convert the schema from a prior version
        # to this version. The order in this sequence is important. Translations are
        # applied from top to bottom in the listed order.
        - rename_attributes:
            # Rename attributes of all spans, regardless of span name.
            # The keys are the old attribute name used prior to this version, the values are
            # the new attribute name starting from this version.
            attribute_map:
              peer.service: peer.service.name

    span_events:
      changes:
        # Sequence of translations to apply to convert the schema from a prior version
        # to this version. The order in this sequence is important. Translations are
        # applied from top to bottom in the listed order.
        - rename_events:
            # Rename events. The keys are old event names, the values are the new event names.
            name_map: {exception.stacktrace: exception.stack_trace}

        - rename_attributes:
            # Rename attributes of events.
            # The keys are the old attribute name used prior to this version, the values are
            # the new attribute name starting from this version.
            attribute_map:
              peer.service: peer.service.name

            apply_to_events:
              # Optional event names to apply to. If empty applies to all events.
              # Conditions in apply_to_spans and apply_to_events are logical AND-ed,
              # both should match for transformation to be applied.
              - exception.stack_trace

    metrics:
      changes:
        # Sequence of translations to apply to convert the schema from a prior version
        # to this version. The order in this sequence is important. Translations are
        # applied from top to bottom in the listed order.

        - rename_labels:
            # Rename labels of all metrics, regardless of metric name.
            # The keys are the old label name used prior to this version, the values are
            # the new label name starting from this version.
            label_map:
              http.status_code: http.response_status_code

        - rename_metrics:
            # Rename metrics. The keys are old metric names, the values are the new metric names.
            container.cpu.usage.total: cpu.usage.total
            container.memory.usage.max: memory.usage.max

        - rename_labels:
            apply_to_metrics:
              # Name of the metric to apply this rule to. If empty the rule applies to all metrics.
              - system.cpu.utilization
              - system.memory.usage
              - system.memory.utilization
              - system.paging.usage
            label_map:
              # The keys are the old label name used prior to this version, the values are
              # the new label name starting from this version.
              status: state

        - add_labels:
            # Add labels to a metric.
            apply_to_metrics:
              - cpu.usage.total
              - memory.usage.max
            label_map:
              status: state

        - duplicate_labels:
            # Duplicate labels of a metric.
            apply_to_metrics:
              - cpu.usage.total
              - memory.usage.max
            label_map:
              # Maps of labels to copy. Keys are existing label names, values are new label
              # names. The value of the new label is set equal to the value of existing label.
              container.name: plugin_instance

        - split:
            # Rules to split a metric into several metrics using a label for split.
            #
            # Name of old metric to split.
            apply_to_metric: system.memory.usage
            # Name of label in the old metric to use for splitting. The label will be
            # eliminated, the new metric will not have it.
            # Note: this can be enhanced in the future to allow an array of labels
            # so that splitting can happen across more then one dimension.
            by_label: state
            # Names of new metrics to create, one for each possible value of label.
            labels_to_metrics:
              # If "state" label equals "used" create a new metric called "system.memory.used".
              used: system.memory.used
              free: system.memory.free
              cached: system.memory.cached

        - merge:
            # List of rules to merge several metrics into a new metrics and add a label.
            #
            # Name of new metric to create.
            create_metric: system.disk.io
            # Name of label to add to the new metric.
            by_label: direction
            # Mapping of old metrics to new label values, one for each possible value of the
            #  new label.
            labels_for_metrics:
              # For old metric "system.disk.io.read" set "direction" label equal to "read".
              read: system.disk.io.read
              write: system.disk.io.write

        - to_delta:
            # List of metric names to convert cumulative values to delta values.
            - system.cpu.time

    logs:
      changes:
        - rename_logs:
            # map of key/values. The keys are the old log name used
            # the previous version, the values are the new log name
            # starting from this version.
            ProcessStarted: otel.process.started
        - rename_attributes:
            attribute_map:
              process.executable_name: process.executable.name
            apply_to_logs:
              # Optional. If it is missing the transformation is applied
              # to all logs. If it is present the transformation is applied
              # only to the logs with the name that is found in the sequence
              # specified below.
              - otel.process.started

  1.0.0: